import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class main {
	public static void main(String[] args) throws IOException{

		// we expect exactly one argument: the name of the input file
		if (args.length!=1) {
			System.err.println("\n");
			System.err.println("Impl Interpreter\n");
			System.err.println("=================\n\n");
			System.err.println("Please give as input argument a filename\n");
			System.exit(-1);
		}
		String filename=args[0];

		// open the input file
		CharStream input = CharStreams.fromFileName(filename);
		//new ANTLRFileStream (filename); // depricated

		// create a lexer/scanner
		implLexer lex = new implLexer(input);

		// get the stream of tokens from the scanner
		CommonTokenStream tokens = new CommonTokenStream(lex);

		// create a parser
		implParser parser = new implParser(tokens);

		// and parse anything from the grammar for "start"
		ParseTree parseTree = parser.start();

		// Construct an interpreter and run it on the parse tree
		Interpreter interpreter = new Interpreter();
		Command result=(Command)interpreter.visit(parseTree);
		//System.out.println("The result is: "+
		result.eval(new Environment());
	}
}

// We write an interpreter that implements interface
// "implVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Integer.

class Interpreter extends AbstractParseTreeVisitor<AST> implements implVisitor<AST> {

	public AST visitStart(implParser.StartContext ctx){
		return visit(ctx.cs);
	};
	public AST visitOutput(implParser.OutputContext ctx){
		return new Output((Expr) visit(ctx.e));
	}

	public AST visitCommands(implParser.CommandsContext ctx){
		List<Command> cmds = new ArrayList<Command>();
		for(implParser.CommandContext c : ctx.cmds){
			cmds.add((Command) visit(c));
		}

		return new Sequence(cmds);
	}

	//Commands
	public AST visitAssignment(implParser.AssignmentContext ctx){
		return new Assignment(ctx.x.getText(),(Expr) visit(ctx.e));
	}

	public AST visitStartHardware(implParser.StartHardwareContext ctx){
		return new Assignment(ctx.x.getText(),(Expr) visit(ctx.e));
	}
	public AST visitInputs(implParser.InputsContext ctx){
		return new Inputs(ctx.x.getText(),(Expr) visit(ctx.e));
	}
	public AST visitOutputs(implParser.OutputsContext ctx){

		List<String> varname = new ArrayList<String>();
		for(implParser.OutputContext e : ctx.e){
			varname.add((String) visit(e));
		}
		return new Outputs(varname);

	}
	public AST visitLatch(implParser.LatchContext ctx){
		return new Latch(ctx.x.getText(),(Expr) visit(ctx.e));
	}
	public AST visitUpdate(implParser.UpdateContext ctx){
		List<Assignment> assignments = new ArrayList<Assignment>();
		for(implParser.CommandContext c : ctx.c){
			assignments.add((Assignment) visit(c));
		}

		return new Update(assignments);
	}


	public AST visitSimulate(implParser.StartSimulate ctx){
		return new Simulate(ctx.x.getText(),(Expr) visit(ctx.e));
	}

	//Expressions
	public AST visitVariable(implParser.VariableContext ctx){
		return new Variable(ctx.x.getText());
	};
	public AST visitConstant(implParser.ConstantContext ctx){
		return new Constant(Integer.parseInt(ctx.c.getText()));
	};

	//Condition expressions
	public AST visitParentheses(implParser.ParenthesesContext ctx){
		return visit(ctx.e1);
	};
	public AST visitNot(implParser.NotContext ctx){
		return new Not((Expr)visit(ctx.e1));
	}
	public AST visitAnd(implParser.AndContext ctx){
		return new And((Expr)visit(ctx.e1),(Expr)visit(ctx.e2));
	}
	public AST visitOr(implParser.OrContext ctx){
		return new Or((Expr)visit(ctx.e1),(Expr)visit(ctx.e2));
	}


}

